count()
?count()
flights %>%
select(carrier) %>%
count(carrier, 'AA')
flights %>%
select(carrier) %>%
count(carrier, 'AA')
new <- flights %>%
select(carrier) %>%
count(carrier, 'AA')
View(new)
new <- flights %>%
select(carrier) %>%
filter(.=='AA'))
new <- flights %>%
select(carrier) %>%
filter(.=='AA')
View(new)
filter(carrier==AA')
new <- flights %>%
select(carrier) %>%
filter(carrier=='AA')
new <- flights %>%
select(carrier) %>%
filter(carrier='AA')
new <- flights %>%
select(carrier) %>%
filter(carrier=='AA')
View(new)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
View(flights)
library(dplyr)
mean(flights$dep_delay, na.rm=TRUE)
flights %>%
mutate(Delay= as.numeric(dep_delay)) %>%
select(Delay) %>%
mean()
t.test(flights$dep_delay, conf.level = .95)
new <- flights %>%
select(carrier) %>%
filter(carrier=='AA')
count()
new <- flights %>%
select(carrier) %>%
filter(carrier=='AA')
View(new)
new <- flights %>%
select(carrier) %>%
filter(carrier == 'AA')
View(new)
length(flights)
length(new)
count(flights)
count(new)
count(flights)
new <- flights %>%
select(carrier) %>%
filter(carrier == 'AA') %>%
count()
flights %>%
select(carrier) %>%
filter(carrier == 'AA') %>%
count()
AA_flights <- flights %>%
select(carrier) %>%
filter(carrier == 'AA') %>%
count()
count(AA_flights)
AA_flights <- flights %>%
select(carrier) %>%
filter(carrier == 'AA')
count(AA_flights)
count(AA_flights, name='AA Flights')
AA_flights <- flights %>%
select(carrier) %>%
filter(carrier == 'AA')
count(AA_flights, name='AA Flights')
count(AA_flights, name='AA Flights')
count(AA_flights)/count(flights$carriers)
count(flights)
count(AA_flights)/count(flights)
AAflights <- flights %>%
select(carrier) %>%
filter(carrier == 'AA')
count(AAflights, name='AA Flights')
count(AAflights, name='AA Flights')
The proportion of leaving flights that are AA in our sample is $$ count(AAflights)/count(flights)$$, which is equal to .09718329, or .10 when rounded.
prop.test(32729,count(flights),conf.level = 0.85)
count(flights)
prop.test(32729,336776,conf.level = 0.85)
prop.test(count(AAflights),336776,conf.level = 0.85)
prop.test(as.integer(count(AAflights)),336776,conf.level = 0.85)
prop.test(as.integer(count(AAflights)),
as.integer(count(flights)),
,conf.level = 0.85)
prop.test(as.integer(count(AAflights)),
as.integer(count(flights)),
conf.level = 0.85)
prop.test(12, 100, p=.95, alternative='more')
prop.test(12, 100, p=.95, alternative='greater')
mean(flights$dep_delay, na.rm=TRUE)
flights %>%
mutate(Delay= as.numeric(dep_delay)) %>%
select(Delay) %>%
mean()
mean(flights$dep_delay, na.rm=TRUE)
mean(flights$dep_delay, na.rm=TRUE)
t.test(flights$dep_delay, conf.level = .95)
flights %>%
mutate(Delay= as.numeric(dep_delay)) %>%
select(Delay) %>%
mean()
mean(flights$dep_delay, na.rm=TRUE)
t.test(flights$dep_delay, conf.level = .95)
t.test(flights$dep_delay,mu=10,alternative='two.sided')
```{r}
prop.test(12, 100, p=.95, alternative='greater')
prop.test(12, 100, p=.05, alternative='greater')
prop.test(12, 100, p = .05, alternative='greater')
prop.test(12, 100, p = .05, alternative='greater')
prop.test(12, 100, p = .95, alternative='greater')
prop.test(12, 100, p = .05, alternative='greater')
prop.test(12, 100, p = .05, alternative='greater')
prop.test(12, 100, p = .95, alternative='greater')
prop.test(12, 100, p = .05, alternative='greater')
prop.test(as.integer(count(AAflights), as.integer(count(flights), p = .12, alternative='greater'))
prop.test(as.integer(count(AAflights), as.integer(count(flights), p = .12, alternative='greater')))
prop.test(as.integer(count(AAflights), as.integer(count(flights), p = .12, alternative='greater'))
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p = .12, alternative='greater')
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=.12, alternative='greater')
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater')
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.85,0.12, alternative='greater')
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.5,0.12, alternative='greater')
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.5, alternative='greater', 0.12)
?prop.test
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.5, alternative='greater', conf.level=0.95)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), alternative='greater', conf.level=0.95)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=.12, alternative='greater', conf.level=0.95)
mean(flights)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.5)
count(flights)
prop.test(32729, 336776, p=0.12, alternative='greater', conf.level=0.5)
prop.test(32729, 336776, p=0.12, alternative='greater', conf.level=0.5)
prop.test(32729, 336776, p=0.12, alternative='greater')
, conf.level=0.5
prop.test(32729, 336776, p=0.12, alternative='greater', conf.level=0.5)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.5)
prop.test(32729, 336776, p=0.12, alternative='greater', conf.level=0.5)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.5)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.05)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='less', conf.level=0.05)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.05)
prop.test(as.integer(count(AAflights)),
as.integer(count(flights)),
conf.level = 0.85)
AAflights <- flights %>%
select(carrier) %>%
filter(carrier == 'AA')
count(AAflights, name='AA Flights')
prop.test(as.integer(count(AAflights)),
as.integer(count(flights)),
conf.level = 0.85)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.05)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
View(flights)
library(dplyr)
flights %>%
mutate(Delay= as.numeric(dep_delay)) %>%
select(Delay) %>%
mean()
mean(flights$dep_delay, na.rm=TRUE)
t.test(flights$dep_delay, conf.level = .95)
t.test(flights$dep_delay,mu=10,alternative='two.sided')
AAflights <- flights %>%
select(carrier) %>%
filter(carrier == 'AA')
count(AAflights, name='AA Flights')
prop.test(as.integer(count(AAflights)),
as.integer(count(flights)),
conf.level = 0.85)
prop.test(as.integer(count(AAflights)), as.integer(count(flights)), p=0.12, alternative='greater', conf.level=0.05)
mean(flights$dep_delay, na.rm=TRUE)
t.test(flights$dep_delay, conf.level = .95)
(.3862*41)+(.7850*29)+(65.8*-.8265)+32.7866
TukeyHSD(.823)
TukeyHSD(.823, conf.level=.95)
TukeyHSD(.893, numeric, conf.level=.95)
9.756e-09
9.756^-9
?predict()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
diamonds <- diamonds
idealdiamonds <- diamonds[which(diamonds$cut=='Ideal'), ]
nrow(idealdiamonds)
View(diamonds)
library(ggplot2)
diamonds <- diamonds
idealdiamonds <- diamonds[which(diamonds$cut=='Ideal'), ]
nrow(idealdiamonds)
idealdiamonds <- diamonds[which(diamonds$cut=='Ideal'),]
nrow(idealdiamonds)
idealdiamonds <- diamonds[which(diamonds$cut=='Ideal')]
?prop.test
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
advice <- NULL
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
advice <- NULL
ClassData <- read.csv('ClassData.csv')
View(ClassData)
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
advice <- NULL
ClassData <- read.csv('ClassData.csv')
getwd()
advice <- [,]
advice <- []
advice <- []
x = 2
2
x
x = 3
data2
list = [1, 2, 3, 4, 5:8]
list = c[1, 2, 3, 4, 5:8]
list = c[1, 2, 3, 4, 5, 8]
list = c[1, 2, 3, 4, 5, 8]
list1 = c[1, 2, 3, 4, 5, 8]
list1 = [c(1, 2, 3, 4, 5, 8)]
list1 = c(1, 2, 3, 4, 5, 8)
list1
list1 = c(1, 2, 3, 4, 5:8)
list1
list1[5:8]
list1[5:8, 2]
#######
# Combining categories by spelling
?grepl()
?c()
View(AAflights)
flights
values(flights)
colnames(flights)
flights$year
flights$year[,5]
flights$year[5]
flights[4,25]
flights[5,25]
flights[5,30]
View(flights)
flights['day',30]
flights$day[10]
flights$day[10]
flights$day[10:15]
flights$day[10:22]
for i in flights:
list flights$day, while flights$month > 1
import dplyr
import ('dplyr')
library('dplyr')
for i in flights:
list flights$day, while flights$month > 1
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake = as.int(69)
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake = 69
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- as.int(69)
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- 69
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- c(69)
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- c(69)
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- "hi"
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- "hi"
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
Drake <- [0, 69]
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
drake <- 5
drake <- 5
drake
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
drake
-
# -- Subsetting = vectors and Dataframe
# ClassData[ ,2] (this is second column with all the rows)
# -- Syntax
# if(condition){statement}else{statement}
# ifelse(condition, statements, statement2)
# for(value in sequence){statement}
# if answer is yes, exit. If it's no, evaluate statement and repeat
# Like driving on a highway and have to make a decision at every exit
drake
len('https://uva.theopenscholar.com/early-development-lab')
length
length('https://uva.theopenscholar.com/early-development-lab')
nchar('https://uva.theopenscholar.com/early-development-lab')
rs
# Drake Wagner
## Question 1
setwd('C:\\Users\\dwagn\\git\\random-python-scripts')
getwd()
data <- read.csv('data\\pokemon_data.csv')
library('dplyr')
iinstall.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
library('dplyr')
df <- data.frame(animal, rating)
## Question 2
animal <- c('Lion', 'Dog', 'Fish', 'Elephant', 'Mole')
rating <- c(5,10,4,7,3)
df <- data.frame(animal, rating)
df
## Question 3
dataframe %>%
filter(desc(rating >= 5))
## Question 3
dataframe %>%
filter(desc(rating >= 5))
library('dplyr')
## Question 3
dataframe %>%
filter(desc(rating >= 5))
## Question 3
dataframe %>%
filter(rating >= 5)
## Question 3
dataframe %>%
filter(rating >= 5)
library('dplyr')
library('tidyverse')
library('dplyr')
remove.packages("rlang")
install.packages("rlang")
library(rlang)
library(dplyr)
library(rlang)
library(dplyr)
remove.packages("rlang")
remove.packages("dplyr")
remove.packages("rlang")
remove.packages("dplyr")
install.packages("rlang")
install.packages("dplyr")
install.packages("rlang")
library(rlang)
library(dplyr)
install.packages("dplyr")
library(rlang)
library(dplyr)
library('dplyr')
## Question 3
dataframe %>%
filter(rating >= 5)
## Question 3
df %>%
filter(rating >= 5)
## Question 3
df %>%
filter(desc(rating >= 5))
## Question 3
df %>%
filter(rating >= 5) %>%
arrange(desc('rating'))
## Question 3
df %>%
filter(rating >= 5) %>%
arrange(desc(df['rating']))
## Question 3
df %>%
filter(rating >= 5) %>%
arrange(desc(df[rating]))
## Question 3
df %>%
filter(rating >= 5) %>%
arrange(desc(rating))
print(type(x))
## Question 4
# 4a
x <- '5'
print(type(x))
print(type_of(x))
print(typeof(x))
x <- as_type(x, int)
x <- as_type(x, int)
# 4b
var_1 <- 10
x <- toInt(x)
x <- asInteger(x)
x <- asInt(x)
x <- as.integer(x)
print(typeof(x))
getwd()
source('C:/Users/dwagn/Downloads/R/ds5100_lab11_answers.r')
